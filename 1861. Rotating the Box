class Solution {
public:
    vector<vector<char>> rotateTheBox(vector<vector<char>>& box) {
        int m = box.size(), n = box[0].size();
        vector<vector<char>> rotatedBox(n, vector<char>(m, '.'));
        
        // Apply gravity to each row of the box
        for (int i = 0; i < m; ++i) {
            int empty = n - 1; // Start from the last column
            for (int j = n - 1; j >= 0; --j) {
                if (box[i][j] == '*') {
                    empty = j - 1; // Reset empty pointer to before the obstacle
                } 
                else if (box[i][j] == '#') {
                    box[i][j] = '.';
                    box[i][empty--] = '#'; // Move stone to the nearest empty position
                }
            }
        }
        
        // Rotate the box 90 degrees clockwise
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                rotatedBox[j][m - 1 - i] = box[i][j];
            }
        }
        
        return rotatedBox;
    }
};
